"""
""" Sire Expressions
""" ================
"""
""" This is a collection of utilities for working with Rex trees that
""" represent Sire expressions.
"""
""" This is initially useful for writing macros, but should also be
""" useful in sire-in-sire once that's fully working.
"""


""" Imports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

/+  "01-fan"  [apply]
/+  "02-bit"  [if or ifNot false and not]
/+  "03-nat"  []
/+  "04-app"  [len idx]
/+  "05-eql"  [eql neq]
/+  "06-may"  []
/+  "07-row"  [map "," all zipWith rowApply turn]
/+  "08-pin"  []
/+  "09-lis"  [CONS NIL listCase digits]
/+  "09-lis"  [listFromRow listToRowReversed]
/+  "10-eat"  [LEFT RIGHT eitherCase eitherOpen]
/+  "11-rex"  [WORD EBED NODE HEIR CORD FAIL]
/+  "11-rex"  [rexCase rexGetWord rexGetNodeFolded mkHeir mergeHeir isWord]
/+  "12-com"  []
/+  "13-sci"  []
/+  "14-cab"  []
/+  "15-tab"  [tabToPairs]
/+  "16-chr"  [isAlpha isDigit]
/+  "17-str"  [strCat strToRow strWeld]


""" TODO: Does not belong here! """"""""""""""""""""""""""""""""""""""""""""""""

= (eitherRowSequence results)
  """ sequence :: Row (Either a b) -> Either a (Row b)
  """
  """ TODO I guess these should be moved to `08-lis.sire`?
. NIL listFromRow-results
? (loop acc rest)
! listCase rest
    RIGHT!(listToRowReversed acc)
& (eth more)
! eitherCase eth LEFT
& x (loop (CONS x acc) more)

= (eitherRowTraverse f xs)
  """ TODO I guess these should be moved to `08-lis.sire`?
| (eitherRowSequence map-f-xs)


""" Expresssions """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

(showNat n)=(strCat digits-n)

= (natE n)     | WORD showNat-n
= (varE v)     | WORD v
= (cnsE v)     | EBED v
= (barE xs)    | NODE "|" xs
= (appE2 x y)  | NODE "|" [x y]
= (letE i x b) | HEIR "@" [i x] b
= (recE i x b) | HEIR "@@" [i x] b
= (txtE t)     | CORD t
= (gensymE n)  | varE (strWeld "_g" showNat-n)

= (appE xs)
| if (eql 1 len-xs) idx-0-xs
| NODE "|" xs

= (inlineE xs)
| if (eql 1 len-xs) idx-0-xs
| NODE "!" xs

(rowE vals)=(NODE ',' vals)
(vecE vals)=(NODE ',' vals)

= (tabE tab)
  """ (Tab Rex -> Rex)
@ kvs
    | turn tabToPairs-tab
    & kv
    @ k idx-0-kv
    @ v idx-1-kv
    | NODE '=' [(WORD showNat-k) v]
| NODE '%' [vecE-kvs]


""" Sire Symbols """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (isSymbolChar c)
| or eql-"_"-c
| or isAlpha-c
     isDigit-c

= (isSymbol str)
| if (eql 0 str) false
@ chars strToRow-str
@ c0 idx-0-chars
| and (not isDigit-c0)
| all isSymbolChar chars

= (getSymbol rex k)
! rexGetWord rex LEFT-[rex "`readSymbol` expected a NAME node"]
& n
| ifNot isSymbol-n LEFT-[rex "Invalid Character in Symbol"]
! k n

= (readSymbol rex)
! getSymbol rex (x & RIGHT x)


""" Sire Law Signatures """"""""""""""""""""""""""""""""""""""""""""""""""""""""

= (readNodeMerged rex parsers k)
  """ :: Rex
  """ -> Row (Rex -> Either (Rex, Text) a)
  """ -> (Row a -> b)
  """ -> b
@ nonNode LEFT-[rex "Expected a node"]
! rexGetNodeFolded rex nonNode
& (rune kids)
@ expecting
    | strCat ("Expecting ", showNat len-parsers, " kids")
| if (neq len-parsers len-kids) | FAIL rex expecting
! eitherOpen (| eitherRowSequence | zipWith apply parsers kids)
& params
| rowApply k params ;; TODO Can I inline this somehow?


= (readRowOfNames ctx rex)
  """ Text -> Rex -> Either (Rex, Text) [Text]
@ mustBe
    | strWeld ctx
    | " pattern must be a symbol (x) or a row of: (x,y,z)"
@ onErr  | (_ & FAIL rex mustBe)
@ noHeir | "name-sequence cannot have an heir"
@ onNode
    & (rune kids heir)
    | if (neq rune ",") | FAIL rex mustBe
    | if (neq heir 0)   | FAIL rex noHeir
    | eitherRowTraverse readSymbol kids
@ onWord
    & _
    ! eitherOpen readSymbol-rex
    & res
    | idx 0 res
! rexCase rex onNode onWord onErr onErr onErr


""" Macro Generators """""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (simpleMacro rune argParsers fun env nex xs mK)
@ rex (mkHeir rune xs mK)
@ arg mergeHeir-xs-mK
| if (neq len-argParsers len-arg)
    | LEFT , rex | strCat
                 , "Expecting "
                   (showNat len-argParsers)
                   " parameters"
! eitherOpen
    | eitherRowSequence
    | zipWith apply argParsers arg
& params
! eitherOpen (rowApply fun params)
| (res & RIGHT [0 res])

= (gensymMacro rune argParsers fun env nex xs mK)
@ rex (mkHeir rune xs mK)
@ arg mergeHeir-xs-mK
| if (neq len-argParsers len-arg)
    | LEFT , rex | strCat
                 , "Expecting "
                   (showNat len-argParsers)
                   " parameters"
! eitherOpen
    | eitherRowSequence
    | zipWith apply argParsers arg
& params
; trk [%OPENED %[=params]]
| rowApply fun-nex params


""" Tests """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

?? eql LEFT-"hi"     | eitherRowSequence-[RIGHT-3 LEFT-"hi" RIGHT-4]
?? eql RIGHT-[3 4 5] | eitherRowSequence-[RIGHT-3 RIGHT-4 RIGHT-5]


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^ isSymbolChar isSymbol getSymbol readSymbol
^-^ natE varE cnsE barE appE2 letE txtE appE inlineE
^-^
^-^ showNat eitherRowSequence eitherRowTraverse
^-^
^-^ readRowOfNames readNodeMerged
^-^
^-^ simpleMacro gensymMacro
^-^ eitherRowSequence eitherRowTraverse
^-^ vecE tabE gensymE
^-^ isWord
