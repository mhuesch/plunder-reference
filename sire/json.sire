/+  boot
/+  tar
/+  switch  ["#switch"]
/+  mutrec  ["#mutrec"]


""" Lexer Result Type """"""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" data LexResult a =
"""    = LEX_NONE
"""    | LEX_FAIL Text
"""    | LEX_OKAY a Bar

= LEX_NONE       %none
= (LEX_FAIL t)   [%fail t]
= (LEX_OKAY x r) [%okay x r]

= (lexCase lex none fail okay)
| if isNat-lex none
# switch idx-0-lex
= 0 [_ err]*lex*(fail err)
= 1 [_ x r]*lex*(okay x r)


""" Bar Utilities (TODO: Move into standard library) """""""""""""""""""""""""""

(barPop b)=[(barIdx 0 b) (barDrop 1 b)]

(barPopBytes n b)=[(barTake n b) (barDrop n b)]

= (barPopK b k)
! k (barIdx 0 b) (barDrop 1 b)

= (barPopBytesK n b k)
! k (barTake n b) (barDrop n b)


""" Lexems """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= TOK_SPACE   | %_
= TOK_NULL    | %n
= TOK_TRUE    | %t
= TOK_FALSE   | %f
= TOK_COMMA   | ','
= TOK_COLON   | ':'
= TOK_L_BRAK  | '['
= TOK_R_BRAK  | ']'
= TOK_L_CURL  | '{'
= TOK_R_CURL  | '}'
= (TOK_STR t) | [%str t]
= (TOK_NUM n) | [%num n]


""" Lexing Utilities """""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (match pred bar cont)
: (c cs) <! barPopK bar
| ifNot (pred c) LEX_NONE
! cont c cs

= (match_ pred bar cont)
: (c cs) <! barPopK bar
| ifNot (pred c) LEX_NONE
! cont cs

= (matchChar char bar cont)
! match (aeq char) bar cont

= (matchChar_ char bar cont)
! match_ (aeq char) bar cont

= (lex lexer bar)
! lexer bar LEX_FAIL LEX_OKAY LEX_NONE

= (lexAll lexer input)
; trk ['lexAll' %[=lexer =input]]
. NIL input
? (loop acc bar)
; trk ['loop' %[=acc =bar]]
| ifNot (barLen bar)
    | RIGHT (listToRowReversed acc)
! lexer bar LEX_FAIL
  (t more & loop (CONS t acc) more)
  (LEFT ["no match" bar])


""" Lexers """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

; (Bar -> LexResult Lexeme)
= (lexSymbol input fail okay noMatch)
: (hed rest) <! barPopBytesK 4 input
| if (eql b#null hed)
    ! okay TOK_NULL rest
| if (eql b#true hed)
    ! okay TOK_TRUE rest
: (c cs) <! barPopK rest
| if (and (eql b#fals hed) (eql c 'e'))
    ! okay TOK_FALSE cs
| noMatch

?? eql (lex lexSymbol b#null)      | LEX_OKAY TOK_NULL b#{}
?? eql (lex lexSymbol b#nullpqrs)  | LEX_OKAY TOK_NULL b#pqrs
?? eql (lex lexSymbol b#0ullpqrs)  | LEX_NONE
?? eql (lex lexSymbol b#0nullpqrs) | LEX_NONE
?? eql (lex lexSymbol b#true)      | LEX_OKAY TOK_TRUE b#{}
?? eql (lex lexSymbol b#truepqrs)  | LEX_OKAY TOK_TRUE b#pqrs
?? eql (lex lexSymbol b#false)     | LEX_OKAY TOK_FALSE b#{}
?? eql (lex lexSymbol b#falsepqrs) | LEX_OKAY TOK_FALSE b#pqrs

; (Bar -> LexResult Lexeme)
= (lexRune input fail okay noMatch)
: (hed rest) <- barPopK input
; trk [%lexRune input %[=hed =rest] (barPop input)]
# switch hed
= ',' ! okay TOK_COMMA  rest
= ':' ! okay TOK_COLON  rest
= '[' ! okay TOK_L_BRAK rest
= ']' ! okay TOK_R_BRAK rest
= '{' ! okay TOK_L_CURL rest
= '}' ! okay TOK_R_CURL rest
| noMatch

;
; TODO Inliner bug?  If the <- is replaced with <! here, this fails.
;
; TODO The above is extremely important to investigate, it implies a
;      significant correctnes bug in the Sire inliner!
;
; ; (Bar -> LexResult Lexeme)
; = (lexRune input fail okay noMatch)
; : (hed rest) <- barPopK input
; ; trk [%lexRune input %[=hed =rest] (barPop input)]
; # switch hed
; = ',' ! okay TOK_COMMA  rest
; = ':' ! okay TOK_COLON  rest
; = '[' ! okay TOK_L_BRAK rest
; = ']' ! okay TOK_R_BRAK rest
; = '{' ! okay TOK_L_CURL rest
; = '}' ! okay TOK_R_CURL rest
; | noMatch

?? eql (lex lexRune b#{,ax}) | LEX_OKAY TOK_COMMA  b#ax
?? eql (lex lexRune b#{[ax}) | LEX_OKAY TOK_L_BRAK b#ax
?? eql (lex lexRune b#{ ax}) | LEX_NONE

; (Char -> Bool)
(isSpace c)=(cabHas c %[0x20 0x09 0x0A 0x0D])

?? isSpace ' '        ;; space
?? isSpace 0x20       ;; space
?? isSpace 0x09       ;; tab
?? isSpace 0x0A       ;; newline
?? isSpace 0x0D       ;; carriage return
?? not (isSpace ',')  ;;

; (Bar -> LexResult Lexeme)
= (lexSpace input fail okay noMatch)
: (inputHed inputRest) <! barPopK input
| if (! isSpace inputHed)
    . inputRest
    ? (go more)
    * [moreHed moreRest] barPop-more
    | ifNot (! isSpace moreHed) (! okay TOK_SPACE more)
    | go moreRest
| noMatch

?? eql (lex lexSpace b#{   }) | LEX_OKAY TOK_SPACE b#{}
?? eql (lex lexSpace b#{  #}) | LEX_OKAY TOK_SPACE b#{#}
?? eql (lex lexSpace b#{ ##}) | LEX_OKAY TOK_SPACE b#{##}
?? eql (lex lexSpace b#{###}) | LEX_NONE

; (Bar -> LexResult Text)
= (lexString input fail okay noMatch)
  """
  """ ### TODO: Handle escape characters
  """
  """ 4. If backslashes, run escape-character-substitution.
  """
  """ -   This is the slow-path, so don't sweat it.
  """ -   Iterate over the bar by converting it into a list.
  """ -   Run a function over the stream (returning a new stream).
  """ -   Create a new bar from the result (barFromCharList).
  """
: (b bs) <! barPopK input
| if (eql b '"')
    . false 0
    ? (loop seenEscape off)
    @ c (barIdx off bs)
    | if (aeq 0 c)
        ! fail 'Unexpected EOF (string)'
    | if (aeq '\' c)
        @ d (barIdx (inc off) bs)
        | if (cabHas d %['"' '/' '\' b f n r t])
            | loop true (add 2 off)
        | if (aeq %u d)
            ; TOD Handle errors
            | loop true (add 6 off)
        ! fail 'Invalid escape character'
    | if (aeq '"' c)
        | ifNot seenEscape
            @ contents (barTake off bs)
            @ remain   (barDrop (inc off) bs)
            ! okay (TOK_STR contents) remain
      """
      """ TODO Do escape substitution here instead of just taking a slice
      """
        @ contents (barTake off bs)
        @ remain   (barDrop (inc off) bs)
        ! okay (TOK_STR contents) remain
    | loop seenEscape (inc off)
| noMatch

?? eql (lex lexString b#{x"a"}) | LEX_NONE
?? eql (lex lexString b#{"asf}) | LEX_FAIL 'Unexpected EOF (string)'
?? eql (lex lexString b#{"a"x}) | LEX_OKAY (TOK_STR b#a) b#x
?? eql (lex lexString b#{"ab"}) | LEX_OKAY (TOK_STR b#ab) b#{}

; (Bar -> LexResult Text)
= (lexNumber input fail okay noMatch)
  """
  """ TODO: Negative Numbers
  """ TODO: Fractions
  """ TODO: Exponents
  """
: (c cs) <- barPopK input
@ val (sub c 48)
| if (aeq val 0)
    ! okay (TOK_NUM 0) cs
| if (lte val 9)
    . val cs
    ? (go acc rest)
    | seq acc
    : (c cs) <- barPopK rest
    ; trk %[=acc =rest =c =cs]
    | if (or (lth c 48) (gth c 57))
        ! okay (TOK_NUM acc) rest
    | go (add (sub c 48) (mul 10 val)) cs
| noMatch

?? eql (lex lexNumber b#{a1}) | LEX_NONE
?? eql (lex lexNumber b#{01}) | LEX_OKAY (TOK_NUM 0)  b#1
?? eql (lex lexNumber b#{10}) | LEX_OKAY (TOK_NUM 10) b#{}
?? eql (lex lexNumber b#{99}) | LEX_OKAY (TOK_NUM 99) b#{}

; (Bar -> LexResult Lexeme)
= (lexJson input fail okay noMatch)
! lexString input fail okay
! lexSpace  input fail okay
! lexSymbol input fail okay
! lexRune   input fail okay
! lexNumber input fail okay
| noMatch

= (jsonLexer input)
! lex lexJson input

= (jsonLexAll input)
! lexAll lexJson input

?? eql (jsonLexer b#{null_}) | LEX_OKAY TOK_NULL b#_
?? eql (jsonLexer b#{[ull_}) | LEX_OKAY TOK_L_BRAK b#ull_

?? eql (jsonLexAll b#{[null]"pqrs"})
    | RIGHT
   ,, TOK_L_BRAK
   ,, TOK_NULL
   ,, TOK_R_BRAK
   ,, TOK_STR b#pqrs

?? eql (jsonLexAll b#{[null, true, false, 42]"pqrs"})
    | RIGHT
   ,, TOK_L_BRAK
   ,, TOK_NULL
   ,, TOK_COMMA
   ,, TOK_SPACE
   ,, TOK_TRUE
   ,, TOK_COMMA
   ,, TOK_SPACE
   ,, TOK_FALSE
   ,, TOK_COMMA
   ,, TOK_SPACE
   ,, TOK_NUM 42
   ,, TOK_R_BRAK
   ,, TOK_STR b#pqrs


""" Json Values """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= JSON_NULL    | %nil
= JSON_TRUE    | %ya
= JSON_FALSE   | %no
= TAG_JSON_STR | %str
= TAG_JSON_NUM | %num
= TAG_JSON_VEC | %vec
= TAG_JSON_MAP | %map
= (JSON_STR s) | [%str s]
= (JSON_NUM n) | [%num n]
= (JSON_VEC r) | [%vec r]
= (JSON_MAP t) | [%map t]


""" Parsing """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" TODO Reformulate the lexer and parser so that we work with a stream
""" instead.

= (eatSpace stream)
: (t ts) <- listCase stream stream
| if (eql TOK_SPACE t) ts stream

= (parseLexerStream inputStream topFail topOkay)
# mutrec %loop
    | val inputStream topFail topOkay
= (val stream fail ok)
    @ stream (eatSpace stream)
    : (t ts) <! listCase stream (fail "value" stream)
    | if (eql t TOK_NULL)   | ok JSON_NULL ts
    | if (eql t TOK_TRUE)   | ok JSON_TRUE ts
    | if (eql t TOK_FALSE)  | ok JSON_FALSE ts
    | if (eql t TOK_L_BRAK) | arr NIL ts fail ok
    | if (eql t TOK_L_CURL) | obj %[] ts fail ok
    | if (eql idx-0-t %str) | ok (JSON_STR idx-1-t) ts
    | if (eql idx-0-t %num) | ok (JSON_NUM idx-1-t) ts
    | fail "value" stream
;
= (obj acc stream fail ok)
    ;
    @ stream (eatSpace stream)
    ; trk %[s1=(listToRow stream)]
    : (t ts) <! listCase stream (fail "'}', or key" stream)
    | if (eql t TOK_R_CURL)
        | ok (JSON_MAP acc) ts
    * [k v] t
    | if (or isNat-t | neq k TAG_JSON_STR)
      (fail "'}', or key" stream)
    @ newKey barNat-v
    ;
    @ stream (eatSpace ts)
    ; trk %[s2=(listToRow stream)]
    @ complain (fail 'Expecting :' stream)
    : (t ts) <! listCase stream complain
    | if (neq TOK_COLON t) complain
    ;
    @ stream (eatSpace ts)
    ; trk %[s3=(listToRow stream)]
    : (newVal stream) <- val stream fail
    @ acc (tabMut newKey newVal acc)
    ;
    @ stream (eatSpace stream)
    @ complain (fail 'Expecting , or }' stream)
    : (t ts) <! listCase stream complain
    | if (eql t TOK_R_CURL) | obj acc stream fail ok
    | if (eql t TOK_COMMA)  | obj acc ts fail ok
    | complain
;
= (arr acc stream fail ok)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; [end]
    @ stream (eatSpace stream)
    @ complain (fail "space, ']', or value" stream)
    : (t ts) <! listCase stream complain
    | if (eql t TOK_R_BRAK)
        @ res (JSON_VEC | listToRowReversed acc)
        | ok res ts
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; [val]
    : (val more) <- val stream fail
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; [more]
    @ more     (eatSpace more)
    @ complain (fail "space, ']', or value" stream)
    : (m ms) <! listCase more complain
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; [final]
    | if (eql TOK_R_BRAK m)
        @ acc (CONS val acc)
        @ res JSON_VEC-(listToRowReversed acc)
        | ok res ms
    | if (eql TOK_COMMA m)
        @ acc (CONS val acc)
        | arr acc ms fail ok
    | fail "space or ',' or ']'" more

= (parseValue input)
: tokRow <- eitherCase (jsonLexAll input) die
; trk %[=tokRow]
: (v extra) <- parseLexerStream (listFromRow tokRow) (x y & die x,y)
| [v extra]

?? eql (parseValue b#{[null]})
   ,, JSON_VEC [JSON_NULL]
   ,, NIL

?? eql (parseValue b#{ [null,null,true,false] })
   ,,   | JSON_VEC
       ,, JSON_NULL
       ,, JSON_NULL
       ,, JSON_TRUE
       ,, JSON_FALSE
   ,, [TOK_SPACE 0]

?? eql (parseValue b#{[[]]})
   ,, JSON_VEC [(JSON_VEC [])]
   ,, NIL

?? eql (parseValue b#{[[null,null]]})
   ,, JSON_VEC [(JSON_VEC (JSON_NULL, JSON_NULL))]
   ,, NIL

?? eql (parseValue b#{[[0,0],[0, 0],[0 ,0],[0 , 0]]})
   ,,   | JSON_VEC
       ,, JSON_VEC (JSON_NUM 0, JSON_NUM 0)
       ,, JSON_VEC (JSON_NUM 0, JSON_NUM 0)
       ,, JSON_VEC (JSON_NUM 0, JSON_NUM 0)
       ,, JSON_VEC (JSON_NUM 0, JSON_NUM 0)
   ,, NIL

?? eql (parseValue b#{[0, ",", 1]})
   ,, JSON_VEC (JSON_NUM 0, JSON_STR b#{,}, JSON_NUM 1)
   ,, NIL

?? eql (parseValue b#{{}})   (JSON_MAP %[], NIL)
?? eql (parseValue b#{ { }}) (JSON_MAP %[], NIL)
?? eql (parseValue b#{ {"str":"x", "null":null}})
   ,,   | JSON_MAP
       %% =str  (JSON_STR b#x)
       %% =null JSON_NULL
   ,, NIL


""" Printer """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" TODO: Substitue escape characters.
""" TODO: Handle edge-cases with "\u1234" escapes.

= (printJSON input)
| barFlat
. input
? (go json)
; trk ['go' json]
| if (eql JSON_NULL json)  b#null
| if (eql JSON_TRUE json)  b#true
| if (eql JSON_FALSE json) b#false
* t,v json
| if (eql TAG_JSON_STR t)
    | [b#{"} v b#{"}]
| if (eql TAG_JSON_NUM t)
    | natBar (showNat v)
| if (eql TAG_JSON_VEC t)
   ,, b#{[}
   ,, listIntersperse b#{,} (| listFromRow | map go v)
   ,, b#{]}
| if (eql TAG_JSON_MAP t)
   ,, b#'{'
   ,,  @ goKV ? (goKV pair)
              * k,v pair
             ,, go (JSON_STR | natBar k)
             ,, b#{:}
             ,, go v
       | listIntersperse b#{,} (| listFromRow | map goKV | tabToPairs v)
   ,, b#'}'
| die ["impossible" t json]

?? eql b#{["hi",null,true,false,99]}
    | printJSON
    | JSON_VEC
   ,, JSON_STR b#hi
   ,, JSON_NULL
   ,, JSON_TRUE
   ,, JSON_FALSE
   ,, JSON_NUM 99

?? eql b#{{"null":null,"bools":[true,false]}}
    | printJSON
    | JSON_MAP
   %% =null  JSON_NULL
   %% =bools JSON_VEC-[JSON_TRUE JSON_FALSE]

??  | eql
        ,, b#{{}}
        ,, b#{{}}
        ,, b#{{"str":"x","null":null}}
   ,, printJSON | idx 0 | parseValue b#{{}}
   ,, printJSON | idx 0 | parseValue b#{ { }}
   ,, printJSON | idx 0 | parseValue b#{ {"str":"x", "null":null}}
