"""
""" Bars
""" ====
"""
""" Bars are data-jetted byte arrays.
"""
""" The data-jet has the noun-shape (0 1 1 PAD) where PAD is a bit-array
""" whose width is a multiple of 8.
"""
"""     REPL> inspect b#"foo"
"""     [0 1 1 24080230]
"""
"""     REPL> natPad %foo 24
"""     24080230
"""
"""     REPL> (0 1 1 (natPad %foo 24))
"""     b#foo
"""
"""     REPL> (0 1 1 (natPad %foo 32))
"""     x#666f6f00
"""


""" Imports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

/+  "01-fan"  [isFun isApp isNat funBody funName funArgs]
/+  "01-fan"  [seq inc die]
/+  "02-bit"  [bit not if ifNot or and]
/+  "03-nat"  [lte even]
/+  "03-nat"  [mod lsh rsh add bex mul sub dec div min takeBits]
/+  "04-app"  [len get idx]
/+  "05-eql"  [eql neq]
/+  "06-may"  [maybeCase]
/+  "07-row"  ["," rowAnd take map foldl foldr all gen weld cat]
/+  "08-pin"  []
/+  "09-lis"  [CONS NIL listCase]
/+  "09-lis"  [listToRow listFromRow]
/+  "09-lis"  [listGen listFindIndex listElemIndex listFoldr]
/+  "10-eat"  [LEFT RIGHT]
/+  "11-rex"  [HEIR WORD rexCase]
/+  "12-com"  [",,"]
/+  "13-sci"  []
/+  "14-cab"  []
/+  "15-tab"  []
/+  "16-chr"  []
/+  "17-str"  [strToRow]
/+  "18-exp"  [cnsE]
/+  "19-hax"  ["#"]
/+  "20-pad"  [padLen padWeld]
/+  "21-col"  []


""" Definitions """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

;;;
;;; TODO Should bars be defined in terms of pad operations?
;;;

= (isBar b)
@ bod (funBody b)
| rowAnd
,, isFun b
,, eql 1 funName-b
,, eql 1 funArgs-b
,, isNat bod
,, neq 0 bod
,, eql 0 (mod padLen-bod 8)

= (byteWidth n)
. 0 n
? (loop acc n)
| seq acc
| ifNot n acc
| loop (inc acc) (rsh n 8)

= (barTrail n)
. 0 n
? (loop acc num)
| seq acc
| if (or eql-1-num eql-0-num)
    | acc
@ nex | rsh num 8
@ nac | ifNot mod-num-8 (inc acc) 0
| loop nac nex

= (barEnc xtr bits)
| add bits
| bex | mul 8 | add xtr byteWidth-bits

= (barDec n)
| sub n | bex | mul 8 (dec byteWidth-n)

= (padBar pad)     | 0 1 1 pad
= (mkBar xtr bits) | padBar (barEnc xtr bits)
= (natBar n)       | mkBar 0 n
= (barNat n)       | barDec (funBody n)
= (barLen bar)     | div (padLen funBody-bar) 8
= (barNull bar)    | eql 1 (funBody bar)

= (barIdx i bar)
. i (barNat bar)
? (loop i n)
| ifNot i (mod n 256)
| ifNot n 0
| loop (dec i) (div n 256)

; Number of zeros at the end of a row.
= (zEnd r)
@ len (len r)
| ifNot len 0
@ las (dec len)
. 0 las
? (loop n ix)
@ vl | get r ix
| if vl n
| ifNot ix inc-n
| loop inc-n dec-ix

= (barHas byt bar)
@ wid (barLen bar)
. 0
? (loop i)
| if (eql i wid) 0
| if (eql byt barIdx-i-bar) 1
| loop (inc i)

; Strip zeros from the end of a row.
= (stripZEnd r)
| take (sub len-r zEnd-r) r

= (w8 b) | mod b 256

= (bytesBar row)
@ siz | len row
@ pad | zEnd row
@ byt | map w8 | take (sub siz pad) row
@ fun (x acc)&(add x lsh-acc-8)
@ bit | foldr fun 0 byt
| mkBar pad bit

?? eql (bytesBar [])      | 0 1 1 | 1
?? eql (bytesBar [0])     | 0 1 1 | 256
?? eql (bytesBar [255])   | 0 1 1 | 511
?? eql (bytesBar [0 0])   | 0 1 1 | 65536
?? eql (bytesBar [0 255]) | 0 1 1 | add 65536 (mul 255 256)
?? eql (bytesBar [255 0]) | 0 1 1 | add 65536 255

= (barGen n f)     | bytesBar | gen n f
= (barGet bar idx) | barIdx idx bar
= (barBytes b)     | gen (barLen b) (barGet b)
= (barFoldl f z b) | foldl f z (barBytes b)
= (barFoldr f z b) | foldr f z (barBytes b)
= (barAll f b)     | all f (barBytes b)

;; TODO Find other places that would benefit from pad operations.
(barWeld x y)=(0 1 1 (padWeld funBody-x funBody-y))

emptyBar=(0 1 1 1)

(barCat bs)=(foldr barWeld emptyBar bs)

(barCatList bs)=(barCat (listToRow bs))

= (barTake n b) | barGen (min n barLen-b) (barGet b)
= (barDrop n b) | barGen (sub barLen-b n) (i & barGet b (add i n))

(barTakeNatBytes n b)=(takeBits (mul n 8) barNat-b)

= (barCountHeadMatching match b)
. 0
? (loop i)
| seq i
| ifNot (match (barIdx i b)) i
| loop (inc i)

(barDropWhile f b)=(barDrop (barCountHeadMatching f b) b)
(barTakeWhile f b)=(barTake (barCountHeadMatching f b) b)

= (barToList b)      | listGen (barLen b) (barGet b)
= (barToRow b)       | gen (barLen b) (barGet b)
= (barFindIndex f b) | listFindIndex f (barToList b)
= (barElemIndex e b) | listElemIndex e (barToList b)
= (barSplitAt i b)   | [(barTake i b) (barDrop i b)]

= (barSplitOneWith fun b)
! maybeCase (barFindIndex fun b) [b emptyBar]
& i
| [(barTake i b) (barDrop (inc i) b)]

= (barSplitWith fun bar)
| if (barNull bar) NIL
. bar
? (loop bar)
! maybeCase (barFindIndex fun bar) (CONS bar NIL)
& i
| CONS (barTake i bar)
| loop (barDrop (inc i) bar)

(barSplitOne e b)=(barSplitOneWith (eql e) b)
(barSplit ele bar)=(barSplitWith (eql ele) bar)

;;; TODO use (barCatList (listIntersperse sep (listFromRow vals)))
= (barIntercalate sep vals)
. emptyBar listFromRow-vals
? (go acc res)
! listCase res acc
& (x xs)
! listCase xs (barWeld acc x)
& (_ _)
| go (barCat acc,x,sep) xs

= (hexCharToNat v)
| if (lte v %9) (sub v %0)
| add 10 (sub (min v %f) %a)

= (barFromHex nat)
@ dig | map hexCharToNat strToRow-nat
@ pad | if (even len-dig) [] [0]
@ buf | listFromRow cat-[pad dig [0 1]]
. 0 buf 1
? (loop acc lis pos)
| seq acc
! listCase lis (0 1 1 acc)
& (a as)
! listCase as (die %impossible)
& (b bs)
@ acc (| add acc | add mul-pos-b | mul-pos | mul 16 a)
| loop acc bs (mul 256 pos)

(barPad bar)=(funBody bar)

= (barLit name func _ _ kids heir)
@ rexp     | HEIR "#" (weld WORD-name kids) heir
@ badShape | LEFT [rexp "Expcted two kids"]
@ badType  | LEFT [rexp "Bar literal expects a text parameter"]
@ kids     | if (eql 0 heir) kids (weld kids [heir])
@ pram     | idx 0 kids
| if (neq 1 len-kids) badShape
! rexCase pram
  (_ _ _)&badType
  (bare)&(| RIGHT , 0 | cnsE | func bare)
  (text)&(| RIGHT , 0 | cnsE | func text)
  (page)&(| RIGHT , 0 | cnsE | func page)
  (_)&badType

"#b"=(barLit "b" natBar)
"#x"=(barLit "x" barFromHex)

= (barFlat x)
| if isBar-x
    | x
| if isApp-x
    | barCat
    | map barFlat x
| b#""

newline=(natBar 10)

= (barUnlines lines)
| barCatList
| listFoldr
    & (x xs)
    [x [newline xs]]
  NIL
  (listFromRow lines)


""" Tests """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

?? eql [%a [%b [%c 0]]] (barToList b#abc)
?? eql [%a %b %c]       (barToRow b#abc)

?? eql b#fdsafdsa (barWeld b#fds b#afdsa)

= (checkBar expect pad nat)
@ actual (barEnc pad nat)
@ actNat (barDec actual)
@ actPad (barTrail actual)
| and eql-actual-expect
| and eql-pad-actPad
      eql-nat-actNat

?? eql 0 (barTrail 0x1ff)
?? eql 1 (barTrail 0x100ff)
?? eql 2 (barTrail 0x10000ff)
?? eql 3 (barTrail 0x1000000ff)
?? eql 0 (barTrail 0x2000000ff)

?? bit (barHas %a b#"abc")
?? bit (barHas %b b#"abc")
?? bit (barHas %c b#"abc")
?? not (barHas %d b#"abc")

?? bit (barHas 16 x#"102030")
?? bit (barHas 32 x#"102030")
?? bit (barHas 48 x#"102030")
?? not (barHas 45 x#"102030")

?? checkBar 1     0 0
?? checkBar 257   0 1
?? checkBar 511   0 255
?? checkBar 65792 0 256
?? checkBar 256   1 0
?? checkBar 65791 1 255
?? checkBar 65536 2 0

?? barNull b#""

?? eql [b#a b#zn]           (barSplitAt 1 b#azn)
?? eql [b#a b#n]            (barSplitOne %z b#azn)
?? eql [b#a b#aba b#n]      (listToRow | barSplit " " b#"a aba n")
?? eql [b#a b#aba b#n b#""] (listToRow | barSplit " " b#"a aba n ")

?? eql b#""  (barDropWhile (eql %a) b#"")
?? eql b#bcd (barDropWhile (eql %a) b#bcd)
?? eql b#bcd (barDropWhile (eql %a) b#aaabcd)


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^ isBar padBar
^-^ emptyBar barNull
^-^ byteWidth barTrail barEnc barDec mkBar natBar barNat barLen barIdx
^-^ zEnd stripZEnd w8 bytesBar barGen barGet barBytes barFoldl barFoldr
^-^ barAll
^-^ barWeld barCat barIntercalate barCatList
^-^ barFromHex barPad
^-^ barTake barDrop
^-^ barFlat barHas
^-^ barToRow barToList
^-^ barFindIndex barElemIndex
^-^ barSplitAt barSplitOne barSplitOneWith barSplitWith barSplit
^-^ barCountHeadMatching barDropWhile barTakeWhile
^-^ barTakeNatBytes
^-^
^-^ "#b" "#x" "#"
^-^
^-^ newline barUnlines
