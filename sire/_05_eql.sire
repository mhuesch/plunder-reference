"""
""" Equality
""" ========
"""
""" This just defines the equality jet (`eql`) for arbitrary Fan values
""" (and it's inverse `neq`)
"""

""" Imports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

/+  "01-fan"  [isFun funArgs funName funBody]
/+  "01-fan"  [isApp car cdr]
/+  "01-fan"  [isNat]
/+  "01-fan"  [I K]
/+  "02-bit"  [if and not]
/+  "03-nat"  [aeq]


""" Definitions """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (eql x y)
| if isFun-x
    | and isFun-y
    | and (aeq funArgs-x funArgs-y)
    | and (aeq funName-x funName-y)
          (eql funBody-x funBody-y)
| if isApp-x
    | and isApp-y
    | and (eql car-x car-y)
          (eql cdr-x cdr-y)
| and isNat-y aeq-x-y

(neq x y)=(not eql-x-y)


""" Tests """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

?? eql 0         0
?? eql 99        99
?? eql I         I
?? eql _&0       _&0
?? eql (0 0)     (0 0)
?? eql (K 0)     (K 0)
?? eql (K K)     (K K)
?? eql (1 0 1 2) (1 0 1 2)


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^ eql neq
