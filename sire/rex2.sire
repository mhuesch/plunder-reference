;;;
;;; This is a data-jetted representation of Rex nodes.
;;;
;;; TODO Reconsider `s/law/fun/`.  I'm not loving it.
;;;

/+  boot
/+  switch


""" Consructors """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= ftagForms | %[NODE LEAF PLOP]
= nodeForms | %[open nest infx pref shut]
= leafForms | %[word cord tape line page]

(NODE name form rune kids heir _)=NODE
(LEAF name form text heir _)=LEAF
(PLOP name plun _)=PLOP


""" Getters and Setters """"""""""""""""""""""""""""""""""""""""""""""""""""""""

(nodeName x)=(idx 4 x)
(nodeForm x)=(idx 3 x)
(nodeRune x)=(idx 2 x)
(nodeKids x)=(idx 1 x)
(nodeHeir x)=(idx 0 x)
(leafName x)=(idx 3 x)
(leafForm x)=(idx 2 x)
(leafText x)=(idx 1 x)
(leafHeir x)=(idx 0 x)
(plopName x)=(idx 1 x)
(plopPlun x)=(idx 0 x)

(setNodeName v x)=(mut 4 v x)
(setNodeForm v x)=(mut 3 v x)
(setNodeRune v x)=(mut 2 v x)
(setNodeKids v x)=(mut 1 v x)
(setNodeHeir v x)=(mut 0 v x)
(setLeafName v x)=(mut 3 v x)
(setLeafForm v x)=(mut 2 v x)
(setLeafText v x)=(mut 1 v x)
(setLeafHeir v x)=(mut 1 v x)
(setPlopName v x)=(mut 1 v x)
(setPlopPlun v x)=(mut 0 v x)


""" Utilities """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (rexType x)
@ tag (| funName | pinItem | head x)
| if (eql tag %NODE) 0
| if (eql tag %LEAF) 1
| if (eql tag %PLOP) 2
| 3

(rexName x)=(idx rexType-x [nodeName leafName plopName] x)

(WORD name text heir)=(LEAF name %word text heir)
(CORD name text heir)=(LEAF name %cord text heir)
(TAPE name text heir)=(LEAF name %tape text heir)
(LINE name text heir)=(LEAF name %line text heir)
(PAGE name text heir)=(LEAF name %page text heir)

(OPEN name rune kids heir)=(NODE name %open rune kids heir)
(NEST name rune kids heir)=(NODE name %nest rune kids heir)
(INFX name rune kids heir)=(NODE name %infx rune kids heir)
(PREF name rune kids heir)=(NODE name %pref rune kids heir)
(SHUT name rune kids heir)=(NODE name %shut rune kids heir)


""" Pattern Matching and Destructuring """""""""""""""""""""""""""""""""""""""""

= (openLeaf x k)
! k leafName-x leafForm-x leafText-x leafHeir-x

= (openNode x k)
! k nodeName-x nodeForm-x nodeRune-x nodeKids-x nodeHeir-x

= (openPlop x k)
! k plopName-x plopPlun-x

= (rexCase x leaf node plop)
# switch (rexType x)
,, ! openNode x node
,, ! openLeaf x leaf
,, ! openPlop x plop


""" Validation """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

runeChars=(b#"$!#%&*+,-./:<=>?@\^`|~")

= wordChars
| barCat
,, b#"_"
,, b#"abcdefghijklmnopqrstuvwxyz"
,, b#"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
,, b#"0123456789"

(isRuneChar c)=(barHas c runeChars)
(isWordChar c)=(barHas c wordChars)

= (isRuneText text)
| rowAnd
,, isBar text
,, neq 0 (barLen text)
,, barAll isRuneChar text

= (isLeafText form text)
| and (isBar text)
# switch form
= %line | 1
= %page | 1
= %cord | barAll a&(and neq-"'"-a neq-10-a) text
= %tape | barAll a&(and neq-'"'-a neq-10-a) text
= %word | rowAnd
       ,, neq 0 (barLen text)
       ,, barAll isWordChar text

= (isRex x)
| trk %isRex,x
| and (eql 1 arity-x)
@ cnstrArgs
    (funArgs head-x)
# switch rexType-x
= 0
    | trk %node,x
    | and (eql 6 cnstrArgs)
    ! openNode x
    & (name form rune kids heir)
    | trk %node,(%[=name =form =rune =kids =heir])
    | rowAnd
   ,, trkVal %name | isNat name
   ,, trkVal %form | cabHas form nodeForms
   ,, trkVal %rune | isRuneText rune
   ,, trkVal %kids | and (isRow kids) (all isRex kids)
   ,, trkVal %heir | or (eql 0 heir) (isRex heir)
= 1
    | trk %leaf,x
    | and (eql 5 cnstrArgs)
    ! openLeaf x
    & (name form text heir)
    | trk %leaf,(%[=name =form =text =heir])
    | rowAnd
   ,, trkVal %name | isNat name
   ,, trkVal %form | cabHas form leafForms
   ,, trkVal %heir | or (eql 0 heir) (isRex heir)
   ,, trkVal %body | isLeafText form text
= 2
    | trk %plop
    | and (eql 3 cnstrArgs)
    | isNat plopName-x


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

;;;
;;; TODO Use this representation in Sire.hs
;;;
;;; TODO Rewrite all macros to use this representation.
;;;
;;; TODO Rewrite this module to not use any macros.
;;;
;;;      Otherwise, the macros wont be able to depend on this.
;;;
;;; TODO Write a full export list.
;;;
;;; ^-^ NODE LEAF PLOP
;;;
