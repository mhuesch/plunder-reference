;;;
;;; ` is just a simple macro that quotes an expression (just like in LISP).
;;;
;;;     `(3 4 5) == (NODE "|" [WORD-"3" WORD-"4" WORD-"5"])
;;;
;;; It works by simply parsing out it's first kid and retuning it as an
;;; embeded plunder value.
;;;

/+  either  (LEFT RIGHT)
/+  bool    (if)
/+  eql     (neq)
/+  row     (len idx)
/+  macro   (HEIR mergeHeir cnsE)


;;;;;;;;;;;;;;;;;
;; Definitions ;;
;;;;;;;;;;;;;;;;;

= ("`" env nex kids heir)
@ rex (HEIR "`" kids heir)
@ args (mergeHeir kids heir)
| if (neq 1 len-args) LEFT-[rex "Expected 1 Parameter"]
| RIGHT
, 0
| cnsE (idx 0 args)


;;;;;;;;;;;
;; Tests ;;
;;;;;;;;;;;

/+  eql    (eql)
/+  macro  (HEIR NODE WORD)

w=WORD

??  eql  `3       | w"3"
??  eql  `(3 4)   | NODE "|" [w"3" w"4"]
??  eql  `[a][b]  | HEIR "," [w"a"] (NODE "," [w"b"])


;;;;;;;;;;;;;
;; Exports ;;
;;;;;;;;;;;;;

^-^ "`"
