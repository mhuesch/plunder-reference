Every tree is either a fun x:{n a b}, an app x:(f g), or a nat x:@.

Evaluate by reducing repeatedly with (->).  Reduce outer trees first.

(f g x) := ((f g) x)

NTH(v,n,fb) is the nth element of the array v (or fb if out of bounds)
LEN(v)      is the length of the array v.
PUSH(v,x)   is the array v with x appended.

NAT(x) = if x:@ then x else 0

RUN(r,(0 f x)) = (RUN(r,f) RUN(r,x))
RUN(r,(1 v k)) = RUN(s,k) where s = PUSH(r,RUN(s,v))
RUN(r,(2 v))   = v
RUN(r,v:@)     = NTH(v,n,v)
RUN(r,x)       = x

v:@                          =>  ARITY(v)=NTH([3 4 3], v, 1)
v:(f _)                      =>  ARITY(v)=(ARITY(f)-1)
v:{n _ _}                    =>  ARITY(v)=n
ARITY(v)>0                   =>  WHNF(v)
v:@                          =>  NF(v)
v:(f g) WHNF(v) NF(f) NF(g)  =>  NF(v)
v:{n a b}                    =>  NF(v)
WHNF(n) WHNF(t) NF(b)        =>  (0 n a b)    -> {NAT(n) NAT(a) b}
v:{n a b}                    =>  (1 f a n v)  -> (f n a b)
v:(f x) WHNF(v)              =>  (1 f a n v)  -> (a f x)
v:@                          =>  (1 f a n v)  -> (n v)
WHNF(v) w=NAT(v)             =>  (2 z p v)    -> if w=0 then z else (p (w-1))
WHNF(x)                      =>  (3 x)        -> NAT(x)+1
f:@ f>3                      =>  (f x)        -> 0
n=LEN([..])                  =>  ({n a b} ..) -> RUN([{n a b} ..],b)
