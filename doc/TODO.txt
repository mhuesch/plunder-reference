Loot
====

- Update parser to match printer.

- Separate Loot from Sire

- Separate Loot from Sire

- Update parser to match printer.

- Consider NOT re-using bindings names in nested laws (in value syntax).

    For example:

        := [natWords a]
        | switch a
           . natWords a
           ? [loop a b]
           | switch b
              | cordConcat
              | R2 [loop a div-b-10] [a mod-b-10]
           , 0 %One %Two %Three %Four %Five %Six %Seven %Eight %Nine
        | {%Zero}

    Should be:

        := [natWords a]
        | switch a
           . natWords a
           ? [loop b c]
           | switch c
              | cordConcat
              | R2 [loop b div-c-10] [b mod-c-10]
           , 0 %One %Two %Three %Four %Five %Six %Seven %Eight %Nine
        | {%Zero}

    Technically the re-use of `a` in `loop` is valid, because the `Loot`
    language does not have lexical scope for law literals.  But it's
    still confusing.

Rex
===

-   Rex runes should be indentation sensitive along the right side (not left)

    These, for example, are aligned:

        %%% x
          | y
         ^^ z

    Instead of the current:

        %%% x
        | y
        ^^ z

-   TODO: Build out a real pretty-printing framework

    Replace this nonsense try-every-way brute force system.

-   Bare expressions should not terminate a block unless they are the
    first line.  This is important now that this syntax is acceptable:

    ```
    | f x
    y
    z
    ```

Sire
====

-   Inline Lambdas: `(x:x 3) := 3`
-   Static Lambdas: `(x![add x x] 3) := 6`
-   Lazy Loading
-   All command runes should be two-characters (except =)
-   Cleanup SireExe.
-   Assertions should print evaluated arguments

    `?? eql (add 1 2) (inc 9)` should print `?? eql 3 10` to show what failed.

    Right now it just prints `1!=0` and `?? eql (add 1 2) (inc 9)`.

Mandelbrot
==========

- TODO Get Mandelbrot code running correctly.

Macros
======

- `*` macro supports tabs.
- Support other types of pattern matching.
- Composite Pattern matching (multiple forms)
- \cases syntax

- Implement command macros.

    Macros currently only work on expressions, but it would be useful
    to have command-macros as well.

    Command macros should also be able to directly modify the environment,
    the macros table, and maybe the requests table.

- Macro definition should just use the `=` rune.

    Add some way to refer to non-identifier symbols.  Like, to enable
    us to have a global variable named 0.

    This is useful because it means that we can do things like

    ```
    ','=rowMacro

    ?? eql `"," `","
    ?? eql [`"," 0 0 emptyRow 0] [`"," 0 0 emptyRow 0]
    ```

    TODO But what about command macros?  There needs to be a clear
         separation too, because commands should be able to modify the
         environment, which requires a different API for expression-macros
         and command-macros.

- Consider using `,,,` (or `,,`?) for one-item-per-line row literals.

    ',' is hard to see, and the syntax rules are unintuitive.  For
    example, the following two expressions are interpreted in totally
    different ways.  This is confusing.

    ```
    , f x  ==>  {f x}

    , f x
    , f x  ==>  {(f x) (f x)}
    ```
