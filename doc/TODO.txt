Sire
====

-   TODO Compile-Time Application ({!! 0 0 3 0} 3 4)

    Go through each sub-expression and turn it into a Pln, then combine
    the results into a single (embeded value) Pln.  If we run into a
    local-reference, abort.

    -   SECOND PHASE:

        Whenever we bind a new local variable, check if it depends on
        any function arguments.  If it does not, then track it's Pln value
        (lazy so that we do no work unless we use it).

-   TODO: Optimize lets AGAIN after inlining

    Inlining can remove references to let-bindings, and we don't want
    to generate code for let-bindings that are not used.

-   TODO Consider adding a system of imports.

    /+ laws
    -- Reads in the last value defined in `laws.sire`
    -- Adds it to a cache (the imports form a DAG).
    -- The file is loaded starting with an empty environment.
    -- Definitions made during import do not affect the existing environment.

    /+ *laws
    -- Same as the above, except that the result is expected to be a
    -- table, and the results are all copied into the current environment.
        -- TODO: How can this be made to work with inlining?

-   TOOD Add a rune for embedding Loot commands and expressions in Sire.

    Maybe something like:

        ##(x=(f x ? 0:1:2 x))

    This would work for commands and also for raw values (but no mixing
    of Bod and Exp).

-   TODO Inline Lambdas: `(x:x 3) := 3`

-   TODO Static Lambdas: `(x![add x x] 3) := 6`

-   TODO All command runes should be two-characters (except =)

    Use `/=`, `*=`, etc.  Having overlapping runes between commands and
    expressions is very confusing because commands are a superset of
    expressions (raw expressions interpreted as PRINT).

    -   TODO Give `XDUMPY` a two-char rune.
    -   TODO Give `XALIAS`, `/` a two-char rune.

-   TODO Cleanup SireExe.

-   TODO Assertions should print evaluated arguments

    `?? eql (add 1 2) (inc 9)` should print `?? eql 3 10` to show what failed.

    Right now it just prints `1!=0` and `?? eql (add 1 2) (inc 9)`.

- TODO Fix weird round-trip bug in tests.


Loot
====

- Go futher and have every generated binder name in an output block get
  a unique name:

    For example, in the following code, we bind `j k l` many times:

        = (jam a b)
        @ c
           ? (jamCore d)
           @ e ((j k l & j (R3:0 k l)) jamCore)
           @ f ((j k l m n & j (R5:2 k l m n)) jamCore)
           @ g ((j k l m & j (R4:3 k l m)) jamCore)

    Large dis-assembled functions are noisy enough without the re-use of
    variables names.

- TODO Add fuzzing to the above.


Rex
===

-   The Open-mode printer should first walk continuation-sequence and
    produce a list.  This way, it doesn't need to worry about the
    does-it-have-an-heir case during the printing/indentation loop.

-   Figure out how to have an input prompt.

    It needs to support multiple lines.  It should probably change once
    a non-block-terminating non-space lines has been input.

-   Consider banning whitespace at the end of lines.

    -   For the REPL, the block parser can have an option to do stripEnd
        before lexing before lexing.

-   Embeded values branch of ADT should not have heir slot.

       What does it even mean to add a heir to an embed value?

       What if the embeded value is "rendered", and *that* has a heir?

-   Rex runes should be indentation sensitive along the right side (not left)

    These, for example, are aligned:

        %%% x
          | y
         ^^ z

    Instead of the current:

        %%% x
        | y
        ^^ z

    TODO: Then how would bare words need to be aligned?

        %%% x
          | y
         ^^ z
          hello

        Tempting to say that you just shouldn't do this.  (You shouldn't).

        However, the data structure does allow `(&& x)hello` and the tall
        form of that needs to be printable somehow.

            && x
             hello

    TODO What about pages?

        Maybe you know, like...

              | x
            """ Do you mean like this?

        Yes, I think it should work like that.

    TODO Does that imply that the space after ''' should be mandatory?

        No.  It looks weird, but it's okay.

                | x
              """y

-   TODO: should name-pages juxtaposition be accepted?

    This used to be supported, but it was removed when special syntax
    for namePage and nameCord were removed.

        X""" This is a
         """ Test.

    However, this is a perfectly coherent concept:

    - It might make the gramar more complex.

    - It breaks the usual assumption that the child of a wide-mode
      objects is in wide-mode.

        Or, to put that another way: `X""" x` can be printed only if it
        isn't in a nested construct.  It's a pretty specific edge-case.

    Overall, I think this syntax looks nice but may not be worth the
    complexity.

    If we were to use a rune instead.

    Actually, another data-point here is that:

        x&""" hi
        $"""x y z

    Are also pretty nice.  Should we allow pages in any non-nested
    context?

    This is actually not hard in the lexer, just accept pages anywhere.
    They will automaticlaly fail to parse in any nested context.

    Main concern is that it's complicated to print correctly.


Plun
====

-   Lazy loading?


Mandelbrot
==========

- TODO Get Mandelbrot code running correctly.


Macro Interface
===============

Change Rex representation to be nicer to read and work with by hand:

    %fdsa            --  Bare word
    [0 s t k?]       --  String x, style `s` (Always use above from where pos)
    [1 x]            --  Directly embedded x
    [RUNE xs k? s?]  --  Optional style at the end.
                     --  0=OPEN which is the default.

    (x y z) => ["|" [%x %y %z]]
    X"fdsa" => [0 0 %X [0 1 %fdsa]]

-   TODO Macros should return "new gensym state" instead of gensym
    increment.  It just simpler, don't need to be so defensive here.


Macro System
============

-   Command parser should also do macro-expansion.

-   Make it so that macros can over-ride built-in syntax.

-   Make all built-in syntax have a short form `@` and a long form `#@`.
    This way, macro-expansions can target the stable two-character runes
    and be free to redefine the one-character version.

    In particular, we want to replace `*`, `@`, and `?` with versions
    that support pattern matching and destructuring.


Macros
======

-   `*` macro should support other forms of destructuring

    - Rows (already supported)
    - Tabs
    - Simple identifiers.
    - Composite patterns

    ```
    * [%[=k =v] x [y1 y2]] _ _
    ```

-   Pattern Matching (with destructuring)

    Something like this.  Whatever.

        ### x
          = 0            | %Zero
          = 9            | %Nine
          = @x (gte x 3) | mod x 3
          = %[=k]        | k
          = [x y]        | add x y
          = [x y z]      | add x add-y-z
          = (0 x)        | x
          = ~[a b c]     | x
          %fallback

-   Support fancy lambda syntax with LambdaCases and pattern matching.
